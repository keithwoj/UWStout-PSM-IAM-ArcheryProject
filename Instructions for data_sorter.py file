1. Make a new folder and call it _Data_Files (underscore at the beginning).  Put this folder in the same folder 
you run this .py file from, and put all of the archer data files inside it.

2. Run the code.  Two additional folders, with folders inside them, will be created in your working directory, along with 
many .txt files.  The two folders will be named "Score_Sorts" and "Row_sorts".  If things already exist they will be overwritten.  

3.  The .txt files which appear inside the folders inside the folder "Score_Sorts" contain only numerical data, with no commas.  
Therefore you should able to directly load these files via various methods, and plot them, calculate means/deviations/etc, 
load into numpy arrays, etc.  

4. On the other hand, the .txt files inside the folders inside the folder "Row_Sorts" -  for instance, a .txt file from the 
subfolder "Sort_By_Date_Rows", named "1__3__2017.txt" - contains a DataFrame object, which contains all scores AND all columns 
( ['Grade'], ['Gender'], etc ) from tournaments on the date 1-3-2017.  You can load in the files in this folder like you can 
the "Score" files, but in that case you'll have yourself a pandas DataFrame object instead of a column of numbers.  But really
this information already exists inside a dictionary, so loading in these .txt files is a bit redundant; better to just access the
dictionary.  Printing them out in this manner is just helpful to understand what is happening with the sorting inside the dictionaries;
if you look at the lines of code which print to a particular file, you can see how those DataFrames are being accessed from the 
dictionaries to print out to those files.  For instance, If you wanted to access the information in the  "1__3__2017.txt" file, 
instead of loading the file in you can just access the existing dictionary row_sort_by_date_dict using the key 1__3__2017.  Like so:

my_data_subset = row_sort_by_date_dict['1__3__2017']

Or for grade 3 data rows you could say

my_other_data_subset = row_sort_by_grade_dict['Grade_3']

5.  The purpose of these two "score sort" and "row sort" dictionary styles is to have 1) an easy system for looking at group statistics, 
but also 2) an easy system for doing further subsorting along other group lines.  For instance, if say, you know want to 
find the Grade_3 archers who are boys, you can use the DataFrame.loc command.  For example, 

grade_3_boys_scores = my_other_data_subset.loc[my_other_data_subset['Gender'] == 'Boys']

and this should return only those rows where the gender is Boys. Note that for dataframes the .loc() command returns rows.  
To access columns, you just use sqaure brackets with string quotes, as in the above lines of code.  (This is also
how you access dictionaries.)

6.  Dictionaries contain key, value pairs.  Input a key, get out a matching value.  Dictionaries are unordered, 
so there is no index associated with the (key, value); this mean you cannot iterate through a dictionary with integer
indexing like you can with lists and other things.  There are ways to iterate over dictionaries however; for instance, with the 
.items() function, you can say 

for key, value in row_sort_by_score_dict.items():
     print("KEY: ", key)
     print("VALUE: ", value)

to print out each key and value.  But while the key will always match the proper value within a single iteration, the key, value 
pairs will come out in any old order, because the dictionary doesn't remember what order you put them in.    This is what it means 
for dictionaries to be "unordered".  A subtle point, but sometimes it does come up and it helps to be familiar with the concept.

In some dictionaries, the value will be a list (for instance, score dictionaries), while in others they will be DataFrame objects
(for instance, the rows dictionaries).  If you're unsure you can check with type() function, i.e given our above example we could say.:

type(grade_3_boys_scores)

and it should return something something DataFrame object.  A list object should tell you it's a list, etc. 

7.  Note that I concatenated the entire data set into one DataFrame called full_df.  So in order to access the entire list of, say, scores,
and calculate the mean, you can use (assuming import numpy as np):  

mean_score_all = np.mean(full_df['Score'])

8. Note that you can access any of my dictionaries in your own script by importing my file. Maybe name my file something better than 
the name I gave it, in hindsight; say, data_sorter.  Then say

import data_sorter

and you should now be able to use the file.object commands, for instance

data_sorter.row_sort_by_grade_dict 

gives you that dictionary.  Assuming your script file is in the same location as the file you're importing.  I think this is also 
true for all objects/variables/etc that my file creates, but this is starting to get outside my expertise so I'm not 100% sure 
if it's that simple.  But I know it works with dictionaries.

9.  When you run the code, it will also print out several additional .txt files to your working directory.  One is called "Data Overview",
and is just a convenient place to put basic oveall stats.  One is called "Dictionary_Examples", and shows a few examples of 
accessing dictionaries.  Probably don't need that if you've read this but that's okay.  It's there.  Another file is called 
"Dictionary_keys", and it just prints out all the dictionaries and their keys for reference. Archer_List is just a printout of the 
dataframes of all 150 archers, and is again mostly just for reference.  Each archer dataframe is actually stored in the dictionary 
archer_dat_dict; that file is just those dictionary values ( print(archer_dat_dict['Archer_1']), print(archer_dat_dict['Archer_2'])...)
being printed out with extra text for readability.  testing.txt is just a place for you to play around and print out stuff you access
to make sure that it's what you think it is.  (I think it's much easier to read long lists in a .txt file than in a console window, but
if you would like to print back to console in PyCharm, the very last line of the code can be put anywhere to restrore the default printing
behaviour.)
